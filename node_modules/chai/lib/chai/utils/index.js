/*!
 * chai
 * Copyright(c) 2011 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

// Dependencies that are used for multiple exports are required here only once
import * as checkError from 'check-error';

// test utility
export {test} from 'chai/lib/chai/utils/test.js';

// type utility
export {type} from 'chai/lib/chai/utils/type-detect.js';

// expectTypes utility
export {expectTypes} from 'chai/lib/chai/utils/expectTypes.js';

// message utility
export {getMessage} from 'chai/lib/chai/utils/getMessage.js';

// actual utility
export {getActual} from 'chai/lib/chai/utils/getActual.js';

// Inspect util
export {inspect} from 'chai/lib/chai/utils/inspect.js';

// Object Display util
export {objDisplay} from 'chai/lib/chai/utils/objDisplay.js';

// Flag utility
export {flag} from 'chai/lib/chai/utils/flag.js';

// Flag transferring utility
export {transferFlags} from 'chai/lib/chai/utils/transferFlags.js';

// Deep equal utility
export {default as eql} from 'deep-eql';

// Deep path info
export {getPathInfo, hasProperty} from 'pathval';

/**
 * Function name
 *
 * @param {Function} fn
 * @returns {string}
 */
export function getName(fn) {
  return fn.name
}

// add Property
export {addProperty} from 'chai/lib/chai/utils/addProperty.js';

// add Method
export {addMethod} from 'chai/lib/chai/utils/addMethod.js';

// overwrite Property
export {overwriteProperty} from 'chai/lib/chai/utils/overwriteProperty.js';

// overwrite Method
export {overwriteMethod} from 'chai/lib/chai/utils/overwriteMethod.js';

// Add a chainable method
export {addChainableMethod} from 'chai/lib/chai/utils/addChainableMethod.js';

// Overwrite chainable method
export {overwriteChainableMethod} from 'chai/lib/chai/utils/overwriteChainableMethod.js';

// Compare by inspect method
export {compareByInspect} from 'chai/lib/chai/utils/compareByInspect.js';

// Get own enumerable property symbols method
export {getOwnEnumerablePropertySymbols} from 'chai/lib/chai/utils/getOwnEnumerablePropertySymbols.js';

// Get own enumerable properties method
export {getOwnEnumerableProperties} from 'chai/lib/chai/utils/getOwnEnumerableProperties.js';

// Checks error against a given set of criteria
export {checkError};

// Proxify util
export {proxify} from 'chai/lib/chai/utils/proxify.js';

// addLengthGuard util
export {addLengthGuard} from 'chai/lib/chai/utils/addLengthGuard.js';

// isProxyEnabled helper
export {isProxyEnabled} from 'chai/lib/chai/utils/isProxyEnabled.js';

// isNaN method
export {isNaN} from 'chai/lib/chai/utils/isNaN.js';

// getOperator method
export {getOperator} from 'chai/lib/chai/utils/getOperator.js';

/**
 * Determines if an object is a `RegExp`
 * This is used since `instanceof` will not work in virtual contexts
 *
 * @param {*} obj Object to test
 * @returns {boolean}
 */
export function isRegExp(obj) {
  return Object.prototype.toString.call(obj) === '[object RegExp]';
}
